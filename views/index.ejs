<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript">
    google.charts.load('current', {'packages':['gantt']});
    google.charts.setOnLoadCallback(drawChart);

    function daysToMilliseconds(days) {
        return days * 24 * 60 * 60 * 1000;
    }

    function drawChart() {
        console.log('Ejecutando drawChart');

        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Task ID');
        data.addColumn('string', 'Task Name');
        data.addColumn('date', 'Start Date');
        data.addColumn('date', 'End Date');
        data.addColumn('number', 'Duration');
        data.addColumn('number', 'Percent Complete');
        data.addColumn('string', 'Dependencies');

        // Datos de proyectos y tareas
        var proyectosData = JSON.parse(document.getElementById('proyectos-data').getAttribute('data-proyectos'));


        console.log('Proyectos y Tareas (Lado del Cliente):', proyectosData);

        // Agrega filas a la tabla de datos
        proyectosData.forEach(project => {
            const inicioProyecto = new Date(project.inicioProyecto);
            const finProyecto = new Date(project.finProyecto);

            data.addRow([
                project._id,
                project.projectName,
                inicioProyecto,
                finProyecto,
                null,
                100,
                null
            ]);

            // Iterar sobre tareas del proyecto
            project.tareas.forEach(task => {
    const dependencies = task.dependencies.join(', '); // Obtén las dependencias como una cadena de IDs separados por coma

    data.addRow([
        `${project._id}-${task._id}`,
        task.title,
        new Date(task.startDate),
        new Date(task.endDate),
        null,
        100,
        dependencies  // Agrega las dependencias aquí
    ]);
});

        });

        var options = {
            height: 275
        };

        var chart = new google.visualization.Gantt(document.getElementById('chart_div'));

        chart.draw(data, options);
    }
</script>



</head>
<body>
  <h1>Proyectos</h1>

  <!-- Formulario para agregar proyectos -->
  <form action="/addProject" method="post">
      <div class="row">
          <div class="col-md-2 mb-3">
              <label for="projectName">Nombre del Proyecto:</label>
              <input type="text" class="form-control" name="projectName" required>
          </div>
          <div class="col-md-2 mb-3">
              <label for="inicioProyecto">Fecha de Inicio:</label>
              <input type="date" class="form-control" name="inicioProyecto" required>
          </div>
          <div class="col-md-2 mb-3">
              <label for="finProyecto">Fecha de Fin:</label>
              <input type="date" class="form-control" name="finProyecto" required>
          </div>
          <div class="col-md-2 mb-3">
              <button class="btn btn-primary" type="submit">Agregar Proyecto</button>
          </div>
      </div>
  </form>

  <!-- Formulario para agregar tareas -->
  <form action="/addTask" method="post">
      <div class="row">
          <div class="col-md-2 mb-3">
              <label for="taskTitle">Título de la Tarea:</label>
              <input type="text" class="form-control" name="taskTitle" required>
          </div>
          <div class="col-md-2 mb-3">
              <label for="projectSelect">Proyecto:</label>
              <select class="form-control" name="projectSelect" required>
                  <% proyectos.forEach(project => { %>
                      <option value="<%= project._id %>"><%= project.projectName %></option>
                  <% }); %>
              </select>
          </div>
          <div class="col-md-2 mb-3">
              <label for="inicioTarea">Fecha de Inicio:</label>
              <input type="date" class="form-control" name="inicioTarea" required>
          </div>
          <div class="col-md-2 mb-3">
              <label for="finTarea">Fecha de Fin:</label>
              <input type="date" class="form-control" name="finTarea" required>
          </div>
          <div class="col-md-2 mb-3">
              <button class="btn btn-primary" type="submit">Agregar Tarea</button>
          </div>
      </div>
  </form>
  <form id="relationForm">
    <!-- Primer Select -->
    <label for="selectTask1">Tarea 1:</label>
    <select id="selectTask1" name="task1"></select>

    <!-- Segundo Select -->
    <label for="selectTask2">Tarea 2:</label>
    <select id="selectTask2" name="task2"></select>

    <!-- Botón para Relacionar Tareas -->
    <button type="button" onclick="relateTasks()">Relacionar Tareas</button>
</form>
  
  <div id="proyectos-data" data-proyectos="<%= JSON.stringify(proyectos) %>"></div>

  <div id="chart_div"></div>




  <script>
    // Llamada AJAX para obtener tareas y llenar los selects
    function fetchTasks() {
        fetch('/tasks')
            .then(response => response.json())
            .then(tasks => {
                populateSelect('selectTask1', tasks);
                populateSelect('selectTask2', tasks);
            })
            .catch(error => console.error('Error al obtener tareas:', error));
    }

    // Función para llenar un select con tareas
    function populateSelect(selectId, tasks) {
        const select = document.getElementById(selectId);
        select.innerHTML = '';

        tasks.forEach(task => {
            const option = document.createElement('option');
            option.value = task._id;
            option.textContent = task.title;
            select.appendChild(option);
        });
    }

    // Lógica para relacionar tareas (puedes ajustar esto según tus necesidades)
    function relateTasks() {
        const task1 = document.getElementById('selectTask1').value;
        const task2 = document.getElementById('selectTask2').value;

        // Aquí puedes realizar acciones relacionadas con la relación de tareas
        console.log('Relacionando tareas:', task1, task2);

        // Puedes enviar los datos al servidor si es necesario
         fetch('/relationEndpoint', {
             method: 'POST',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ task1, task2 })
         })
         .then(response => response.json())
         .then(data => console.log('Respuesta del servidor:', data))
         .catch(error => console.error('Error al relacionar tareas:', error));
    }

    // Llamada inicial para obtener tareas al cargar la página
    fetchTasks();
</script>
</body>
</html>





